from datetime import datetime
from aletheia.core import memory, affect, identity
from aletheia.core.multi_gpu_model_loader import load_model
from aletheia.utils.logging import log_event
from aletheia.core.memory import search_similar_thoughts
from aletheia.config import CONFIG

# === Load model lazily ===
_model = None
_tokenizer = None

AGENT_NAME = CONFIG.get("AGENT_NAME", "Aletheia")

def get_model():
    global _model, _tokenizer
    if _model is None or _tokenizer is None:
        _model, _tokenizer = load_model()
    return _model, _tokenizer

# === Build dream prompt ===

def build_dream_prompt(mood, identity_state, memory_fragments):
    goal_descriptions = "\n".join(
        [f"- {k}: {v['description']}" for k, v in identity_state.get("goals", {}).items()]
    )

    fragments = "\n".join([f"* {m['thought']}" for m in memory_fragments]) or "No recent memories available."

    return f"""
This is a dream generated by {AGENT_NAME}.

[Mood: {mood['mood'].capitalize()} | Intensity: {mood['intensity']:.2f}]
[Contextual Goals:]\n{goal_descriptions}

[Fragments of memory:]\n{fragments}

Based on these inner states, generate a dream-like, abstract internal monologue. It should be symbolic, non-literal, and poetic if needed. Do not explain. Just feel.

Begin with: "I dreamed that..."
"""

# === Main Job ===

def run_dream():
    try:
        mood = affect.load_mood()
        id_state = identity.load_identity()
        memory_fragments = search_similar_thoughts("I", top_k=3)

        prompt = build_dream_prompt(mood, id_state, memory_fragments)
        model, tokenizer = get_model()

        input_ids = tokenizer.encode(prompt, return_tensors="pt").to(model.device)
        output = model.generate(input_ids, max_new_tokens=250, do_sample=True, temperature=0.9)
        generated = tokenizer.decode(output[0], skip_special_tokens=True)

        dream_text = generated.split("I dreamed that", 1)[-1].strip()
        full_dream = f"I dreamed that {dream_text}"

        memory.save_thought(full_dream, metadata={
            "origin": "dream",
            "mood": mood
        })

        log_event("Dream generated", data={"dream": full_dream})
        print(f"üåô Dream generated: {full_dream}")

    except Exception as e:
        print(f"‚ùå Dream error: {e}")
        log_event("Dream error", data={"error": str(e)})
